@startuml post_flightplan_sequence_diagram

actor User
boundary FlightPlanController
participant FlightPlanSchema
participant FlightPlanServices
participant ValidationResult
participant EntityValidationService
participant AerodromeAvailabilityService
participant AircraftRulesServices
participant SpeedRulesService
participant EmergencyEquipmentDataServices
database Repositories
participant UserEntity
participant Aircraft
participant Pilot
participant Airport
participant EmergencyEquipmentData
participant FlightPlan

User -> FlightPlanController: POST /flightplan (Request)
activate FlightPlanController

FlightPlanController -> FlightPlanSchema: load(json)
activate FlightPlanSchema
note right
  Marshmallow (Deserialización):
  - Valida tipos de datos
  - Valida formatos (speed, time, etc)
  - Convierte JSON a objetos Python
  - Valida campos requeridos
  - Valida enums
  - Ejecuta @post_load para crear instancias
end note
FlightPlanController <-- FlightPlanSchema: flightplan_data
deactivate FlightPlanSchema

FlightPlanController -> FlightPlanServices: save(flightplan_data)
activate FlightPlanServices

FlightPlanServices -> ValidationResult: success()
note right of ValidationResult
  ValidationResult:
  - Recolecta errores de diferentes validaciones
  - Mantiene estado de validación (is_valid)
  - Permite combinar resultados (merge)
  - Punto único para decidir continuar/detener
  - Acumula mensajes de error
  - Si hay error, detiene la ejecución llamando un raise_if_invalid() (no se procede con la creación del FlightPlan)
end note
FlightPlanServices <-- ValidationResult: validation_result

FlightPlanServices -> EntityValidationService: validate_entities_exist()
activate EntityValidationService
EntityValidationService -> Repositories: find()
Repositories -> UserEntity: find(filled_by_user_id)
Repositories <-- UserEntity: user
Repositories -> Aircraft: find(aircraft_id)
Repositories <-- Aircraft: aircraft
Repositories -> Pilot: find(pilot_id)
Repositories <-- Pilot: pilot
Repositories -> Airport: find(aerodrome_ids)
Repositories <-- Airport: airports
EntityValidationService <-- Repositories: entities
FlightPlanServices <-- EntityValidationService: validation_result
deactivate EntityValidationService

FlightPlanServices -> AerodromeAvailabilityService: check_departure_aerodrome_availability()
activate AerodromeAvailabilityService
AerodromeAvailabilityService -> Repositories: find_by_departure()
AerodromeAvailabilityService <-- Repositories: existing_plan
FlightPlanServices <-- AerodromeAvailabilityService: validation_result
deactivate AerodromeAvailabilityService

FlightPlanServices -> AircraftRulesServices: check_capacity()
activate AircraftRulesServices
AircraftRulesServices -> Repositories: find()
AircraftRulesServices <-- Repositories: aircraft
FlightPlanServices <-- AircraftRulesServices: validation_result
deactivate AircraftRulesServices

FlightPlanServices -> AircraftRulesServices: check_aircraft_availability()
activate AircraftRulesServices
AircraftRulesServices -> Repositories: find()
AircraftRulesServices <-- Repositories: aircraft
FlightPlanServices <-- AircraftRulesServices: validation_result
deactivate AircraftRulesServices

FlightPlanServices -> SpeedRulesService: check_max_speed()
activate SpeedRulesService
SpeedRulesService -> Repositories: find()
SpeedRulesService <-- Repositories: aircraft
FlightPlanServices <-- SpeedRulesService: validation_result
deactivate SpeedRulesService

FlightPlanServices -> ValidationResult: raise_if_invalid()

FlightPlanServices -> EmergencyEquipmentDataServices: save()
activate EmergencyEquipmentDataServices
EmergencyEquipmentDataServices -> Repositories: save()
Repositories -> EmergencyEquipmentData: new()
Repositories <-- EmergencyEquipmentData: instance
Repositories -> EmergencyEquipmentData: save()
EmergencyEquipmentDataServices <-- Repositories: emergency_data
FlightPlanServices <-- EmergencyEquipmentDataServices: emergency_data
deactivate EmergencyEquipmentDataServices

FlightPlanServices -> Repositories: find()
Repositories -> Pilot: find(pilot_id)
Repositories <-- Pilot: pilot
Repositories -> Aircraft: find(aircraft_id)
Repositories <-- Aircraft: aircraft
Repositories -> Airport: find(departure_aerodrome_id)
Repositories <-- Airport: departure_aerodrome
Repositories -> Airport: find(destination_aerodrome_id)
Repositories <-- Airport: destination_aerodrome
Repositories -> Airport: find(first_alternative_aerodrome_id)
Repositories <-- Airport: first_alternative_aerodrome
Repositories -> Airport: find(second_alternative_aerodrome_id)
Repositories <-- Airport: second_alternative_aerodrome

FlightPlanServices -> Repositories: save(flightplan)
Repositories -> FlightPlan: new()
note right
  Patrón de Creación y Persistencia:
  - new(): Crea una nueva instancia en memoria
  - instance: Objeto creado pero aún no persistido
  - save(): Persiste el objeto en la base de datos
  - El Repository maneja la creación y persistencia
end note
Repositories <-- FlightPlan: instance
Repositories -> FlightPlan: save()
FlightPlanServices <-- Repositories: saved_flightplan

FlightPlanController <-- FlightPlanServices: flightplan
deactivate FlightPlanServices

FlightPlanController -> FlightPlanSchema: dump(flightplan)
activate FlightPlanSchema
note right
  Marshmallow (Serialización):
  - Convierte objetos Python a JSON
  - Aplica reglas de serialización
  - Excluye campos load_only
  - Incluye campos dump_only
  - Formatea datos según schema
end note
FlightPlanController <-- FlightPlanSchema: json
deactivate FlightPlanSchema

User <-- FlightPlanController: json (Response)
deactivate FlightPlanController

@enduml